trigger:
  branches:
    include:
      - main
      - develop
  paths:
    include:
      - EventTypeManagement.API/**
    exclude:
      - README.md
      - docs/*

variables:
  # Build variables
  buildConfiguration: 'Release'
  dotnetSdkVersion: '8.0.x'
  functionAppName: 'eventflex-event-types-api'  # Replace with your actual Azure Function App name
  projectPath: 'EventTypeManagement.API/EventTypeManagement.API/src/EventTypeManagement.API'
  
  # Azure subscription and resource group - replace these values with your own
  azureSubscription: 'eventflex-azure-subscription'  # Service connection name in Azure DevOps
  resourceGroupName: 'eventflex-rg'
  
pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: Build
  displayName: 'Build Function App'
  jobs:
  - job: Build
    displayName: 'Build and Test'
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET SDK $(dotnetSdkVersion)'
      inputs:
        packageType: 'sdk'
        version: '$(dotnetSdkVersion)'
        
    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: '$(projectPath)/*.csproj'
        
    - task: DotNetCoreCLI@2
      displayName: 'Build project'
      inputs:
        command: 'build'
        projects: '$(projectPath)/*.csproj'
        arguments: '--configuration $(buildConfiguration)'
        
    - task: DotNetCoreCLI@2
      displayName: 'Run unit tests'
      inputs:
        command: 'test'
        projects: 'EventTypeManagement.API/EventTypeManagement.API/test/**/*.csproj'
        arguments: '--configuration $(buildConfiguration)'
        
    - task: DotNetCoreCLI@2
      displayName: 'Publish Function App'
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: '$(projectPath)/*.csproj'
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(functionAppName)'
        zipAfterPublish: true
        modifyOutputPath: true
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish artifact'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

- stage: Deploy_Dev
  displayName: 'Deploy to Development'
  dependsOn: Build
  condition: succeeded()
  variables:
    - name: environmentName
      value: 'development'
  jobs:
  - deployment: DeployFunctionApp
    displayName: 'Deploy Function App to Dev'
    environment: 'dev'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureKeyVault@2
            displayName: 'Fetch secrets from Key Vault'
            inputs:
              azureSubscription: '$(azureSubscription)'
              KeyVaultName: 'eventflex-kv'
              SecretsFilter: 'mongoDbConnectionString'
              RunAsPreJob: true
          - task: AzureFunctionApp@1
            displayName: 'Deploy Azure Function App'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: 'functionApp'
              appName: '$(functionAppName)-$(environmentName)'
              package: '$(Pipeline.Workspace)/drop/$(functionAppName)/*.zip'
              deploymentMethod: 'auto'
              appSettings: |
                -ConnectionStrings__MongoDb "$(mongoDbConnectionString)"
                -MessagingService__Domain "$(messagingServiceDomain)"
                -MessagingService__Port "$(messagingServicePort)"

- stage: Deploy_Prod
  displayName: 'Deploy to Production'
  dependsOn: Deploy_Dev
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  variables:
    - name: environmentName
      value: 'production'
  jobs:
  - deployment: DeployFunctionApp
    displayName: 'Deploy Function App to Prod'
    environment: 'prod'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureKeyVault@2
            displayName: 'Fetch secrets from Key Vault'
            inputs:
              azureSubscription: '$(azureSubscription)'
              KeyVaultName: 'eventflex-kv'
              SecretsFilter: 'mongoDbConnectionString'
              RunAsPreJob: true
          - task: AzureFunctionApp@1
            displayName: 'Deploy Azure Function App'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: 'functionApp'
              appName: '$(functionAppName)'
              package: '$(Pipeline.Workspace)/drop/$(functionAppName)/*.zip'
              deploymentMethod: 'auto'
              appSettings: |
                -ConnectionStrings__MongoDb "$(mongoDbConnectionString)"
                -MessagingService__Domain "$(messagingServiceDomain)"
                -MessagingService__Port "$(messagingServicePort)"