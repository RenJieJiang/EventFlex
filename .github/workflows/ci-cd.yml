name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_DB: EventFlex.UserManagement
          POSTGRES_USER: billy
          POSTGRES_PASSWORD: qazwsx1@3
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U billy -d EventFlex.UserManagement"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '9.0.x'
        timeout-minutes: 10  # Increase the timeout to 10 minutes

      - name: Install dotnet-ef tool
        run: dotnet tool install --global dotnet-ef

      - name: Restore dependencies
        run: dotnet restore ./UserManagement.API/UserManagement.API/UserManagement.API.csproj

      - name: Build
        run: dotnet build ./UserManagement.API/UserManagement.API/UserManagement.API.csproj --no-restore --configuration Release

      - name: Run tests
        run: dotnet test ./UserManagement.API/UserManagement.API.Test/UserManagement.API.Test.csproj --no-build --verbosity normal

      - name: Create uuid-ossp extension
        env:
          PGPASSWORD: qazwsx1@3
        run: |
          psql -h localhost -U billy -d EventFlex.UserManagement -c "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";"

      - name: Apply migrations
        run: dotnet ef database update --project ./UserManagement.API/UserManagement.API/UserManagement.API.csproj --startup-project ./UserManagement.API/UserManagement.API/UserManagement.API.csproj

      - name: Build Docker image
        run: docker build -t usermanagementapi:latest --build-arg PROJECT_PATH=UserManagement.API/UserManagement.API/UserManagement.API.csproj --build-arg CONTEXT_PATH=UserManagement.API -f ./UserManagement.API/UserManagement.API/Dockerfile .

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image
        run: |
          docker tag usermanagementapi:latest ${{ secrets.DOCKER_USERNAME }}/usermanagementapi:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/usermanagementapi:latest

      - name: Decode SSH key
        run: |
          echo "${{ secrets.AWS_EC2_KEY }}" | base64 --decode > aws_keypair.pem
          chmod 600 aws_keypair.pem

      - name: Deploy to AWS EC2
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USER }}
          key_path: aws_keypair.pem
          script: |
            docker pull ${{ secrets.DOCKER_USERNAME }}/usermanagementapi:latest
            docker stop usermanagementapi || true
            docker rm usermanagementapi || true
            docker run -d --name postgres -e POSTGRES_DB=EventFlex.UserManagement -e POSTGRES_USER=billy -e POSTGRES_PASSWORD=qazwsx1@3 -v postgres-data:/var/lib/postgresql/data -p 5432:5432 postgres:17
            docker run -d -p 8080:8080 --name usermanagementapi --link postgres:postgres ${{ secrets.DOCKER_USERNAME }}/usermanagementapi:latest