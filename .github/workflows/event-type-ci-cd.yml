name: EventTypeManagement API CI/CD Pipeline

on:
  push:
    branches:
      - main
    paths:
      - '.github/workflows/event-type-ci-cd.yml'
      - 'EventTypeManagement.API/**'
  pull_request:
    branches:
      - main
    paths:
      - '.github/workflows/event-type-ci-cd.yml'
      - 'EventTypeManagement.API/**'
  workflow_dispatch:
    inputs:
      cloud_platform:
        description: 'Cloud Platform for Deployment'
        required: true
        default: 'azure'
        type: choice
        options:
          - aws
          - azure

jobs:
  setup-mongo:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Determine which cloud platform to deploy to
      - name: Set deployment variables
        id: deployment-vars
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            PLATFORM="${{ github.event.inputs.cloud_platform }}"
          else
            PLATFORM="azure"  # Default to AZURE for non-manual trigger
          fi
          echo "PLATFORM=$PLATFORM" >> $GITHUB_ENV

          # Set the appropriate host and username based on platform
          if [ "$PLATFORM" == "aws" ]; then
            echo "HOST=${{ secrets.AWS_EC2_DB_SERVER }}" >> $GITHUB_ENV
            echo "USERNAME=${{ secrets.AWS_UBUNTU_USER }}" >> $GITHUB_ENV
          else
            echo "HOST=${{ secrets.AZURE_VM_HOST }}" >> $GITHUB_ENV
            echo "USERNAME=${{ secrets.AZURE_VM_USERNAME }}" >> $GITHUB_ENV
          fi

      - name: Deploy MongoDB to VM
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ env.HOST }}
          username: ${{ env.USERNAME }}
          key: ${{ env.PLATFORM == 'aws' && secrets.AWS_EC2_KEY || secrets.AZURE_SSH_PRIVATE_KEY }}
          script: |
            echo "SSH connection successful to ${{ env.HOST }}"
            echo "Deploying MongoDB to ${{ env.PLATFORM }} VM"
            
            # Update the package index
            sudo apt-get update -y

            # Check if Docker is installed
            if ! command -v docker &> /dev/null; then
              sudo apt-get install docker.io -y
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker ${{ env.USERNAME }}
            fi

            # Create docker group if it doesn't exist
            if ! getent group docker > /dev/null; then
              sudo groupadd docker
            fi
            
            # Add user to docker group
            sudo usermod -aG docker ${{ env.USERNAME }}

            # Create a new Docker network
            if ! sudo docker network ls | grep -q my_network; then
              echo "Docker network 'my_network' does not exist. Creating it..."
              sudo docker network create my_network
            else
              echo "Docker network 'my_network' already exists."
            fi

            # Check if MongoDB container is already running
            if sudo docker ps --format '{{.Names}}' | grep -Eq "^mongo\$"; then
              echo "MongoDB container is already running."
            else
              # Create Docker volume for MongoDB
              if ! sudo docker volume ls | grep -q mongo-data; then
                sudo docker volume create mongo-data
              fi

              # Stop and remove existing MongoDB container if it exists
              if sudo docker ps -a --format '{{.Names}}' | grep -Eq "^mongo\$"; then
                sudo docker stop mongo
                sudo docker rm mongo
              fi

              # Wait for 2s
              sleep 2

              # Run MongoDB container
              sudo docker run -d --name mongo \
              --network my_network \
              -v mongo-data:/data/db \
              -p 27017:27017 \
              mongo

              # Wait for MongoDB to initialize
              echo "Waiting for MongoDB to be ready..."
              for i in {1..30}; do
                if sudo docker exec mongo mongosh --eval "print('MongoDB is ready')" &> /dev/null; then
                  echo "MongoDB is ready."
                  break
                else
                  echo "Waiting for MongoDB to be ready... ($i/30)"
                  sleep 2
                fi
              done

              if ! sudo docker exec mongo mongosh --eval "print('MongoDB is ready')" &> /dev/null; then
                echo "MongoDB failed to start within the expected time."
                exit 1
              fi

              echo "MongoDB container is up and running."
            fi

            # Check if the event_type_db database and event_types collection exist, and insert a record if they do not
            sudo docker exec mongo mongosh --eval '
            db = db.getSiblingDB("event_type_db");
            if (db.getCollectionNames().indexOf("event_types") < 0) {
              db.createCollection("event_types");
              db.event_types.insertOne({
                "_id": ObjectId("676427e7ba57f1c2c5af93f4"),
                "Name": "PropertyInspect",
                "Description": "Property Inspect"
              });
              print("Database and collection created, and record inserted.");
            } else {
              print("Database and collection already exist.");
            }'
            
            # Output the MongoDB connection string for reference
            echo "MongoDB deployed successfully on ${{ env.PLATFORM }}"
            echo "MongoDB connection string: mongodb://${{ env.HOST }}:27017/event_type_db"
          debug: true  # Enable debug mode
          
    outputs:
      platform: ${{ env.PLATFORM }}
      mongodb_host: ${{ env.HOST }}

  deploy-function:
    needs: setup-mongo
    runs-on: ubuntu-latest
    if: needs.setup-mongo.outputs.platform == 'azure'  # Only deploy to Azure Functions when Azure platform is selected
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '8.0.x'

    - name: Install dependencies
      run: dotnet restore ./EventTypeManagement.API/EventTypeManagement.API/src/EventTypeManagement.API/EventTypeManagement.API.csproj

    - name: Build
      run: dotnet build ./EventTypeManagement.API/EventTypeManagement.API/src/EventTypeManagement.API/EventTypeManagement.API.csproj --configuration Release

    - name: Create appsettings.production.json
      run: |
        cat > ./EventTypeManagement.API/EventTypeManagement.API/src/EventTypeManagement.API/appsettings.production.json << EOF
        {
          "ConnectionStrings": {
            "MongoDb": "mongodb://${{ needs.setup-mongo.outputs.mongodb_host }}:27017/event_type_db"
          },
          "MessagingService": {
            "Domain": "${{ needs.setup-mongo.outputs.mongodb_host }}",
            "Port": "3002"
          }
        }
        EOF

    - name: Publish
      run: dotnet publish ./EventTypeManagement.API/EventTypeManagement.API/src/EventTypeManagement.API/EventTypeManagement.API.csproj --configuration Release --output ./publish

    - name: Deploy to Azure Functions
      uses: Azure/functions-action@v1
      with:
        app-name: ${{ secrets.AZURE_FUNCTION_APP_EVENT_TYPE }}  # Use the name from secrets
        package: ./publish
        publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}

    - name: Update Function App Settings
      uses: Azure/cli@v1
      with:
        inlineScript: |
          az functionapp config appsettings set --name ${{ secrets.AZURE_FUNCTION_APP_EVENT_TYPE }} \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --settings "ConnectionStrings:MongoDb=mongodb://${{ needs.setup-mongo.outputs.mongodb_host }}:27017/event_type_db" \
          "MessagingService:Domain=${{ needs.setup-mongo.outputs.mongodb_host }}" \
          "MessagingService:Port=3002"
      env:
        AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}