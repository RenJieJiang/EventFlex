name: EventFlex Web CI/CD Pipeline

on:
  push:
    branches:
      - main
    paths:
      - 'eventflex-web/**'
  pull_request:
    branches:
      - main
    paths:
      - 'eventflex-web/**'
  workflow_dispatch:
    inputs:
      run_docker_build:
        description: 'Run Docker Build and Push'
        required: true
        default: 'false'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install
        working-directory: ./eventflex-web

      - name: Build
        run: npm run build
        working-directory: ./eventflex-web

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}  

      - name: Build and Push Docker image
        if: ${{ github.event.inputs.run_docker_build == 'true' }}
        run: |
          cd eventflex-web
          docker buildx create --use
          docker buildx build --platform linux/amd64,linux/arm64 -t ${{ secrets.DOCKER_USERNAME }}/eventflex-web:latest --push .

      - name: Copy Kubernetes manifests to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.AWS_EC2_WEB_SERVER }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_KEY }}
          source: "./k8s/eventflex-web/*"
          target: "/home/${{ secrets.AWS_EC2_USER }}"

      - name: SSH to EC2 and Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_EC2_WEB_SERVER }} # Ensure this secret is set in your repository settings
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_KEY }}
          script: |
            # Install Docker
            sudo yum update -y

            # Install Docker if not already installed
            if ! command -v docker &> /dev/null; then
              echo "Docker not found, installing..."
              sudo yum update -y
              sudo yum install -y docker
              sudo systemctl start docker
              sudo systemctl enable docker

              # Create docker group if it doesn't exist and add user to docker group
              if ! getent group docker > /dev/null; then
                sudo groupadd docker
              fi
              sudo usermod -aG docker ${{ secrets.AWS_EC2_USER }}
            else
              echo "Docker is already installed."
            fi

            # Check if iptables is installed
            if ! rpm -q iptables > /dev/null 2>&1; then
              echo "iptables not found, installing..."
              sudo yum install -y iptables
            else
              echo "iptables is already installed."
            fi

            # Install conntrack if not already installed
            if ! command -v conntrack &> /dev/null; then
              echo "conntrack not found, installing..."
              sudo yum install -y conntrack
            else
              echo "conntrack is already installed."
            fi

            # Install crictl if not already installed
            if ! command -v crictl &> /dev/null; then
              echo "crictl not found, installing..."
              VERSION="v1.22.0"
              curl -LO https://github.com/kubernetes-sigs/cri-tools/releases/download/$VERSION/crictl-$VERSION-linux-amd64.tar.gz
              sudo tar zxvf crictl-$VERSION-linux-amd64.tar.gz -C /usr/local/bin
              rm -f crictl-$VERSION-linux-amd64.tar.gz
            else
              echo "crictl is already installed."
            fi

            # Install cri-dockerd if not already installed
            if ! command -v cri-dockerd &> /dev/null; then
              echo "cri-dockerd not found, installing..."
              # 下载适合你系统的最新版本的 cri-dockerd
              VERSION="v0.2.6" # 或者检查 https://github.com/Mirantis/cri-dockerd/releases 获取最新版本号
              curl -LO https://github.com/Mirantis/cri-dockerd/releases/download/${VERSION}/cri-dockerd-${VERSION}-amd64.tar.gz
              tar -xvf cri-dockerd-${VERSION}-amd64.tar.gz
              sudo mv cri-dockerd /usr/local/bin/
              rm cri-dockerd-${VERSION}-amd64.tar.gz
            else
              echo "cri-dockerd is already installed."
            fi

            # Ensure /usr/sbin is in PATH
            export PATH=$PATH:/usr/sbin

            # Check if iptables is in PATH
            if ! command -v iptables &> /dev/null; then
              echo "iptables could not be found"
              exit 1
            fi

            # Check disk space
            df -h

            # Install Minikube if not already installed
            if ! command -v minikube &> /dev/null; then
              echo "Minikube not found, installing..."
              curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
              sudo install minikube-linux-amd64 /usr/local/bin/minikube
            else
              echo "Minikube is already installed."
            fi

            # Install kubectl if not already installed
            if ! command -v kubectl &> /dev/null; then
              echo "kubectl not found, installing..."
              curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
              sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            else
              echo "kubectl is already installed."
            fi

            # Restart Docker service
            sudo systemctl restart docker

            # Start Minikube if not running
            if ! minikube status &> /dev/null; then
              minikube start --driver=none
            else
              echo "Minikube is already running."
            fi

            # Verify Minikube is running
            minikube status

            # Pull Docker image
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/eventflex-web:latest

            # Apply Kubernetes manifests
            kubectl apply -f /home/${{ secrets.AWS_EC2_USER }}/k8s/eventflex-web/deployment.yaml
            kubectl apply -f /home/${{ secrets.AWS_EC2_USER }}/k8s/eventflex-web/service.yaml
            kubectl apply -f /home/${{ secrets.AWS_EC2_USER }}/k8s/eventflex-web/ingress.yaml