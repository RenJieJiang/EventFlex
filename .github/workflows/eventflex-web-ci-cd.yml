name: EventFlex Web CI/CD Pipeline

on:
  push:
    branches:
      - main
    paths:
      - 'eventflex-web/**'
  pull_request:
    branches:
      - main
    paths:
      - 'eventflex-web/**'
  workflow_dispatch:
    inputs:
      cloud_platform:
        description: 'Cloud Platform for Deployment'
        required: true
        default: 'azure'
        type: choice
        options:
          - aws
          - azure

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      platform: ${{ steps.set-platform.outputs.platform }}

    steps:
      - name: Determine deployment platform
        id: set-platform
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            PLATFORM="${{ github.event.inputs.cloud_platform }}"
          else
            PLATFORM="azure"
          fi
          echo "platform=$PLATFORM" >> $GITHUB_OUTPUT
          echo "Selected deployment platform: $PLATFORM"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: ./eventflex-web/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('./eventflex-web/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm install
        working-directory: ./eventflex-web

      - name: Build
        run: npm run build
        working-directory: ./eventflex-web

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}  

      - name: Generate Self-Signed Certificates
        run: |
          mkdir -p ./certs
          openssl req -x509 -newkey rsa:4096 -keyout ./certs/key.pem -out ./certs/cert.pem -days 365 -nodes -subj "/CN=localhost"
          # Set certificate file permissions
          chmod 644 ./certs/key.pem
          chmod 644 ./certs/cert.pem

      - name: List certs directory contents for debugging
        run: ls -la ./certs/

      - name: Verify permissions on certs files
        run: |
          stat ./certs/key.pem
          stat ./certs/cert.pem

      - name: Check for code changes
        id: check-changes
        continue-on-error: true
        run: |
          git fetch --unshallow origin main || git fetch origin main
          CHANGED=0
          if git diff --name-only origin/main...HEAD | grep -q "^eventflex-web/"; then
            CHANGED=1
          fi
          echo "changed=$CHANGED" >> $GITHUB_OUTPUT
          echo "Files changed in eventflex-web: $CHANGED"

      - name: Build and Push Docker image
        uses: docker/build-push-action@v4  # Use the official action instead of CLI
        with:
          context: ./eventflex-web
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/eventflex-web:latest
          # platforms: linux/amd64,linux/arm64
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/eventflex-web:latest
          cache-to: type=inline
          
      # Upload artifacts needed for both deployments
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-artifacts
          path: |
            ./certs/

  deploy-aws:
    needs: build
    runs-on: ubuntu-latest
    if: needs.build.outputs.platform == 'aws'
    
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: deployment-artifacts

      - name: Generate platform-specific docker-compose.yml for AWS
        run: |
          cat > ./docker-compose.yml << EOF
          version: '3.8'
      
          services:
            web:
              image: billyjiang/eventflex-web:latest
              container_name: eventflex-web
              ports:
                - "3000:3000"
              environment:
                - NODE_ENV=production
                - NEXT_PUBLIC_API_URL=http://usermanagementapi:8080/api
                - NEXT_PUBLIC_API_URL_EVENTTYPE=${{ secrets.AWS_EVENTTYPE_API_URL }}
              volumes:
                - /home/${{ secrets.AWS_UBUNTU_USER }}/certs:/app/certs
              command: npm run start
              networks:
                - my_network
      
          networks:
            my_network:
              external: true
          EOF    
          
      - name: Copy Docker Compose file and certificates to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.AWS_EC2_WEB_SERVER }}
          username: ${{ secrets.AWS_UBUNTU_USER }}
          key: ${{ secrets.AWS_EC2_KEY }}
          source: "./docker-compose.yml,./certs/"
          target: "/home/${{ secrets.AWS_UBUNTU_USER }}"
          debug: true

      - name: SSH to EC2 and Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_EC2_WEB_SERVER }}
          username: ${{ secrets.AWS_UBUNTU_USER }}
          key: ${{ secrets.AWS_EC2_KEY }}
          script: |
            echo "SSH connection successful to AWS EC2"

            # Update the package index
            sudo apt-get update -y

            # Initialize the variable
            docker_needs_restart=false

            # Check if Docker is installed
            if ! command -v docker &> /dev/null; then
              sudo apt-get install docker.io -y
              sudo systemctl start docker
              sudo systemctl enable docker
              docker_needs_restart=true
            fi

            # Create docker group if it doesn't exist
            if ! getent group docker > /dev/null; then
              sudo groupadd docker
              docker_needs_restart=true
            fi

            # Add user to docker group
            sudo usermod -aG docker ${{ secrets.AWS_UBUNTU_USER }}

            # Check if Docker Compose is installed
            if command -v docker-compose &> /dev/null; then
              echo "Docker Compose is already installed"
              docker-compose --version
            else
              echo "Docker Compose is not installed, installing now"
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
              sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
              docker-compose --version
              docker_needs_restart=true
            fi

            # Restart Docker only if necessary
            if [ "$docker_needs_restart" = true ]; then
              sudo systemctl restart docker
            fi

            # Pull Docker image and start the application
            cd /home/${{ secrets.AWS_UBUNTU_USER }}/eventflex-web
            sudo docker-compose pull
            sudo docker-compose up -d

  deploy-azure:
    needs: build
    runs-on: ubuntu-latest
    if: needs.build.outputs.platform == 'azure'
    
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: deployment-artifacts
          
      - name: Generate platform-specific docker-compose.yml for Azure
        run: |
          cat > ./docker-compose.yml << EOF
          version: '3.8'
      
          services:
            web:
              image: billyjiang/eventflex-web:latest
              container_name: eventflex-web
              ports:
                - "3000:3000"
              environment:
                - NODE_ENV=production
                - NEXT_PUBLIC_API_URL=http://usermanagementapi:8080/api
                - NEXT_PUBLIC_API_URL_EVENTTYPE=${{ secrets.AZURE_EVENTTYPE_API_URL }}
              volumes:
                - /home/${{ secrets.AZURE_VM_USERNAME }}/certs:/app/certs
              command: npm run start
              networks:
                - my_network
      
          networks:
            my_network:
              external: true
          EOF      

      - name: Copy Docker Compose file and certificates to Azure VM
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.AZURE_VM_HOST }}
          username: ${{ secrets.AZURE_VM_USERNAME }}
          key: ${{ secrets.AZURE_SSH_PRIVATE_KEY }}
          source: "./docker-compose.yml,./certs/"
          target: "/home/${{ secrets.AZURE_VM_USERNAME }}/eventflex-web"
          debug: true

      - name: SSH to Azure VM and Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AZURE_VM_HOST }}
          username: ${{ secrets.AZURE_VM_USERNAME }}
          key: ${{ secrets.AZURE_SSH_PRIVATE_KEY }}
          script: |
            echo "SSH connection successful to Azure VM"

            # Update the package index
            sudo apt-get update -y

            # Initialize the variable
            docker_needs_restart=false

            # Check if Docker is installed
            if ! command -v docker &> /dev/null; then
              sudo apt-get install docker.io -y
              sudo systemctl start docker
              sudo systemctl enable docker
              docker_needs_restart=true
            fi

            # Create docker group if it doesn't exist
            if ! getent group docker > /dev/null; then
              sudo groupadd docker
              docker_needs_restart=true
            fi

            # Add user to docker group
            sudo usermod -aG docker ${{ secrets.AZURE_VM_USERNAME }}

            # Check if Docker Compose is installed
            if command -v docker-compose &> /dev/null; then
              echo "Docker Compose is already installed"
              docker-compose --version
            else
              echo "Docker Compose is not installed, installing now"
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
              sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
              docker-compose --version
              docker_needs_restart=true
            fi

            # Restart Docker only if necessary
            if [ "$docker_needs_restart" = true ]; then
              sudo systemctl restart docker
            fi

            # Create Docker network if it doesn't exist
            if ! sudo docker network ls | grep -q my_network; then
              echo "Docker network 'my_network' does not exist. Creating it..."
              sudo docker network create my_network
            fi

            # Pull Docker image and start the application
            cd /home/${{ secrets.AZURE_VM_USERNAME }}/eventflex-web
            sudo docker-compose pull
            sudo docker-compose up -d