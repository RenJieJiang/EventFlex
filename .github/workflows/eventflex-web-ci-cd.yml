name: EventFlex Web CI/CD Pipeline

on:
  push:
    branches:
      - main
    paths:
      - 'eventflex-web/**'
  pull_request:
    branches:
      - main
    paths:
      - 'eventflex-web/**'
  workflow_dispatch:
    inputs:
      run_docker_build:
        description: 'Run Docker Build and Push'
        required: true
        default: 'false'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install
        working-directory: ./eventflex-web

      - name: Build
        run: npm run build
        working-directory: ./eventflex-web

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}  

      - name: Build and Push Docker image
        if: ${{ github.event.inputs.run_docker_build == 'true' }}
        run: |
          cd eventflex-web
          docker buildx create --use
          docker buildx build --platform linux/amd64,linux/arm64 -t ${{ secrets.DOCKER_USERNAME }}/eventflex-web:latest --push .

      - name: Copy Kubernetes manifests to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.AWS_EC2_WEB_SERVER }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_KEY }}
          source: "./k8s/eventflex-web/*"
          target: "/home/${{ secrets.AWS_EC2_USER }}"

      - name: SSH to EC2 and Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_EC2_WEB_SERVER }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_KEY }}
          script: |
            # Install Docker
            sudo yum update -y
            sudo yum install -y docker iptables conntrack-tools
            sudo systemctl start docker
            sudo systemctl enable docker

            # Create docker group if it doesn't exist
            if ! getent group docker > /dev/null; then
              sudo groupadd docker
            fi

            # Add user to docker group
            sudo usermod -aG docker ${{ secrets.AWS_EC2_USER }}

            # Install iptables
            sudo yum install -y iptables

            # Install conntrack if not already installed
            if ! command -v conntrack &> /dev/null; then
              echo "conntrack not found, installing..."
              sudo yum install -y conntrack
            else
              echo "conntrack is already installed."
            fi

            # Install crictl if not already installed
            if ! command -v crictl &> /dev/null; then
              echo "crictl not found, installing..."
              VERSION="v1.22.0"
              curl -LO https://github.com/kubernetes-sigs/cri-tools/releases/download/$VERSION/crictl-$VERSION-linux-amd64.tar.gz
              sudo tar zxvf crictl-$VERSION-linux-amd64.tar.gz -C /usr/local/bin
              rm -f crictl-$VERSION-linux-amd64.tar.gz
            else
              echo "crictl is already installed."
            fi

            # Install kubeadm, kubelet, and kubectl
            cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo
            [kubernetes]
            name=Kubernetes
            baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
            enabled=1
            gpgcheck=1
            repo_gpgcheck=1
            gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
            EOF

            sudo yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes
            sudo systemctl enable --now kubelet

            # Initialize Kubernetes cluster
            sudo kubeadm init --pod-network-cidr=10.244.0.0/16

            # Set up kubeconfig for the ec2-user
            mkdir -p $HOME/.kube
            sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
            sudo chown $(id -u):$(id -g) $HOME/.kube/config

            # Install a pod network add-on (Flannel)
            kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml

            # Allow scheduling pods on the master node (optional)
            kubectl taint nodes --all node-role.kubernetes.io/control-plane-

            # Pull Docker image
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/eventflex-web:latest

            # Apply Kubernetes manifests
            kubectl apply -f /home/${{ secrets.AWS_EC2_USER }}/k8s/eventflex-web/deployment.yaml
            kubectl apply -f /home/${{ secrets.AWS_EC2_USER }}/k8s/eventflex-web/service.yaml
            kubectl apply -f /home/${{ secrets.AWS_EC2_USER }}/k8s/eventflex-web/ingress.yaml