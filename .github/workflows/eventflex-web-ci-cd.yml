name: EventFlex Web CI/CD Pipeline

on:
  push:
    branches:
      - main
    paths:
      - 'eventflex-web/**'
  pull_request:
    branches:
      - main
    paths:
      - 'eventflex-web/**'
  workflow_dispatch:
    inputs:
      run_docker_build:
        description: 'Run Docker Build and Push'
        required: true
        default: 'true'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install
        working-directory: ./eventflex-web

      - name: Build
        run: npm run build
        working-directory: ./eventflex-web

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}  

      - name: Build and Push Docker image
        if: ${{ github.event.inputs.run_docker_build == 'true' }}
        run: |
          cd eventflex-web
          docker buildx create --use
          docker buildx build --platform linux/amd64,linux/arm64 -t ${{ secrets.DOCKER_USERNAME }}/eventflex-web:latest --push .

      - name: Copy Docker Compose file to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.AWS_EC2_WEB_SERVER }}
          username: ${{ secrets.AWS_UBUNTU_USER }}
          key: ${{ secrets.AWS_EC2_KEY }}
          source: "./eventflex-web/docker-compose.yml"
          target: "/home/${{ secrets.AWS_UBUNTU_USER }}"
          debug: true

      - name: SSH to EC2 and Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_EC2_WEB_SERVER }}
          username: ${{ secrets.AWS_UBUNTU_USER }}
          key: ${{ secrets.AWS_EC2_KEY }}
          script: |
            echo "SSH connection successful"

            echo ${{ secrets.DOCKER_USERNAME }}

            # Update the package index
            sudo apt-get update -y

            # Initialize the variable
            docker_needs_restart=false

            # Check if Docker is installed
            if ! command -v docker &> /dev/null; then
              sudo apt-get install docker.io -y
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker ${{ secrets.AWS_EC2_USER }}
              docker_needs_restart=true
            else
              docker_needs_restart=false
            fi

            # Create docker group if it doesn't exist
            if ! getent group docker > /dev/null; then
              sudo groupadd docker
              docker_needs_restart=true
            fi

            # Add user to docker group
            sudo usermod -aG docker ${{ secrets.AWS_UBUNTU_USER }}

            # Check if Docker Compose is installed
            if command -v docker-compose &> /dev/null; then
              echo "Docker Compose is already installed"
              docker-compose --version
            else
              echo "Docker Compose is not installed, installing now"
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
              sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
              docker-compose --version
              docker_needs_restart=true
            fi

            # Restart Docker only if necessary
            if [ "$docker_needs_restart" = true ]; then
              sudo systemctl restart docker
            fi

            # Pull Docker image and start the application
            cd /home/${{ secrets.AWS_UBUNTU_USER }}/eventflex-web
            sudo docker-compose pull
            sudo docker-compose up -d