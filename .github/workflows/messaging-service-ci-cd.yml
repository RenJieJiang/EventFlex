name: Messaging Service CI/CD Pipeline

on:
  push:
    branches:
      - main
    paths:
      - 'MessagingService/**'
  pull_request:
    branches:
      - main
    paths:
      - 'MessagingService/**'
  workflow_dispatch:
    inputs:
      cloud_platform:
        description: 'Cloud Platform for Deployment'
        required: true
        default: 'aws'
        type: choice
        options:
          - aws
          - azure

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Check out the repository
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      # Set up Node
      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      # Install dependencies
      - name: Install dependencies
        run: |
          cd MessagingService
          npm install

      # Run tests
      # - name: Run tests
      #   run: |
      #     cd MessagingService
      #     npm run test:ci

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}    

      # Build and push Docker image
      - name: Build and push Docker image
        run: |
          cd MessagingService
          docker buildx create --use
          docker buildx build --platform linux/amd64,linux/arm64 -t ${{ secrets.DOCKER_USERNAME }}/messaging-service:latest --push .

      # Determine which cloud platform to deploy to
      - name: Set deployment variables
        id: deployment-vars
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            PLATFORM="${{ github.event.inputs.cloud_platform }}"
          else
            PLATFORM="aws"  # Default to AWS for non-manual trigger
          fi
          echo "PLATFORM=$PLATFORM" >> $GITHUB_ENV

          # Set the appropriate host and username based on platform
          if [ "$PLATFORM" == "aws" ]; then
            echo "HOST=${{ secrets.AWS_EC2_HOST_MESSAGING_SERVICE }}" >> $GITHUB_ENV
            echo "USERNAME=${{ secrets.AWS_UBUNTU_USER }}" >> $GITHUB_ENV
            echo "SSH_KEY=${{ secrets.AWS_EC2_KEY }}" >> $GITHUB_ENV
          else
            echo "HOST=${{ secrets.AZURE_VM_HOST }}" >> $GITHUB_ENV
            echo "USERNAME=${{ secrets.AZURE_VM_USERNAME }}" >> $GITHUB_ENV
            echo "SSH_KEY=${{ secrets.AZURE_SSH_PRIVATE_KEY }}" >> $GITHUB_ENV
          fi

      # Copy docker-compose.yml to target VM
      - name: Copy docker-compose.yml to VM
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.HOST }}
          username: ${{ env.USERNAME }}
          key: ${{ env.SSH_KEY }}
          source: "./MessagingService/docker/docker-compose.yml"
          target: "/home/${{ env.USERNAME }}"

      # Deploy to VM
      - name: SSH to VM and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.HOST }}
          username: ${{ env.USERNAME }}
          key: ${{ env.SSH_KEY }}
          script: |
            echo "SSH connection successful to ${{ env.HOST }}"
            echo "Deploying to ${{ env.PLATFORM }} VM"

            # Update the package index
            sudo apt-get update -y

            # Initialize the variable
            docker_needs_restart=false

            # Check if Docker is installed
            if ! command -v docker &> /dev/null; then
              sudo apt-get install docker.io -y
              sudo systemctl start docker
              sudo systemctl enable docker
              docker_needs_restart=true
            fi

            # Create docker group if it doesn't exist
            if ! getent group docker > /dev/null; then
              sudo groupadd docker
              docker_needs_restart=true
            fi

            # Add user to docker group
            sudo usermod -aG docker ${{ env.USERNAME }}

            # Check if Docker Compose is installed
            if command -v docker-compose &> /dev/null; then
              echo "Docker Compose is already installed"
              docker-compose --version
            else
              echo "Docker Compose is not installed, installing now"
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
              sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
              docker-compose --version
              docker_needs_restart=true
            fi

            # Install nc (netcat)
            if ! command -v nc &> /dev/null; then
              sudo apt-get install -y nmap-ncat || sudo apt-get install -y netcat
            fi

            # Install missing Python libraries
            sudo apt-get install -y python3 python3-pip
            sudo pip3 install cryptography

            # Create a new Docker network
            if ! sudo docker network ls | grep -q my_network; then
              echo "Docker network 'my_network' does not exist. Creating it..."
              sudo docker network create my_network
            else
              echo "Docker network 'my_network' already exists."
            fi

            # Restart Docker only if necessary
            if [ "$docker_needs_restart" = true ]; then
              sudo systemctl restart docker
            fi

            # Pull the Docker image
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/messaging-service:latest

            # List containers before stopping
            echo "Containers before stopping:"
            sudo docker ps -a

            # Stop and remove existing containers
            if sudo docker ps -a --format '{{.Names}}' | grep -Eq "^messaging-service\$"; then
              sudo docker stop messaging-service
              sudo docker rm messaging-service
            fi
            if sudo docker ps -a --format '{{.Names}}' | grep -Eq "^kafka\$"; then
              sudo docker stop kafka
              sudo docker rm kafka
            fi
            if sudo docker ps -a --format '{{.Names}}' | grep -Eq "^zookeeper\$"; then
              sudo docker stop zookeeper
              sudo docker rm zookeeper
            fi

            # List containers after stopping
            echo "Containers after stopping:"
            sudo docker ps -a

            # Remove unused Docker images
            sudo docker image prune -f

            # Change directory to home/${{ env.USERNAME }}/MessagingService/docker
            cd /home/${{ env.USERNAME }}/MessagingService/docker

            # Run Zookeeper and Kafka containers using docker-compose
            sudo -E VAR_DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }} docker-compose -f docker-compose.yml up -d zookeeper kafka
            
            # Wait for Zookeeper to be ready
            for i in {1..10}; do
              if echo srvr | nc localhost 2181; then
                echo "Zookeeper is ready!"
                break
              fi
              echo "Waiting for Zookeeper... attempt $i/10"
              sleep 5
            done
            
            # Wait for Kafka to be ready
            for i in {1..10}; do
              if docker exec kafka kafka-topics --bootstrap-server kafka:9092 --list; then
                echo "Kafka is ready!"
                break
              fi
              echo "Waiting for Kafka... attempt $i/10"
              sleep 5
            done

            # Wait 30s for Kafka to fully initialize
            echo "Waiting 30 seconds for Kafka to fully initialize..."
            sleep 30

            # Run the application container using docker-compose
            sudo docker-compose -f docker-compose.yml up -d messaging-service
            
            # Check if the container is running
            if [ $(sudo docker inspect -f '{{.State.Running}}' messaging-service) != "true" ]; then
              echo "messaging-service container failed to start. Logs:"
              sudo docker logs messaging-service
              exit 1
            fi
            
            echo "Messaging service deployment to ${{ env.PLATFORM }} complete!"
          debug: true  # Enable debug mode