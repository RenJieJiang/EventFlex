name: NotificationService CI/CD Pipeline

on:
  push:
    branches:
      - main
    paths:
      - 'NotificationService/**'
  pull_request:
    branches:
      - main
    paths:
      - 'NotificationService/**'
  workflow_dispatch:
    inputs:
      cloud_platform:
        description: 'Cloud Platform for Deployment'
        required: true
        default: 'azure'
        type: choice
        options:
          - aws
          - azure

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: |
          cd NotificationService
          npm install

      - name: Build the project
        run: |
          cd NotificationService
          npm run build

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          cd NotificationService
          docker build -t ${{ secrets.DOCKER_USERNAME }}/notification-service:latest .

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/notification-service:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Determine which cloud platform to deploy to
      - name: Set deployment variables
        id: deployment-vars
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            PLATFORM="${{ github.event.inputs.cloud_platform }}"
          else
            PLATFORM="azure"  # Default to Azure for non-manual trigger
          fi
          echo "PLATFORM=$PLATFORM" >> $GITHUB_ENV

          # Set the appropriate host and username based on platform
          if [ "$PLATFORM" == "aws" ]; then
            echo "HOST=${{ secrets.AWS_EC2_HOST_MESSAGING_SERVICE }}" >> $GITHUB_ENV
            echo "USERNAME=${{ secrets.AWS_UBUNTU_USER }}" >> $GITHUB_ENV
          else
            echo "HOST=${{ secrets.AZURE_VM_HOST }}" >> $GITHUB_ENV
            echo "USERNAME=${{ secrets.AZURE_VM_USERNAME }}" >> $GITHUB_ENV
          fi

      - name: Copy .env file to VM
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.HOST }}
          username: ${{ env.USERNAME }}
          key: ${{ env.PLATFORM == 'aws' && secrets.AWS_EC2_KEY || secrets.AZURE_SSH_PRIVATE_KEY }}
          source: "NotificationService/.env"
          target: "/home/${{ env.USERNAME }}"
          strip_components: 1

      - name: Install Docker on VM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.HOST }}
          username: ${{ env.USERNAME }}
          key: ${{ env.PLATFORM == 'aws' && secrets.AWS_EC2_KEY || secrets.AZURE_SSH_PRIVATE_KEY }}
          script: |
            echo "SSH connection successful to ${{ env.HOST }}"
            echo "Deploying to ${{ env.PLATFORM }} VM"

            # Update the package index
            sudo apt-get update -y

            # Initialize the variable
            docker_needs_restart=false

            # Check if Docker is installed
            if ! command -v docker &> /dev/null; then
              sudo apt-get install docker.io -y
              sudo systemctl start docker
              sudo systemctl enable docker
              docker_needs_restart=true
            fi

            # Create docker group if it doesn't exist
            if ! getent group docker > /dev/null; then
              sudo groupadd docker
              docker_needs_restart=true
            fi

            # Add user to docker group
            sudo usermod -aG docker ${{ env.USERNAME }}

            # Create a new Docker network if it doesn't exist
            if ! sudo docker network ls | grep -q my_network; then
              echo "Docker network 'my_network' does not exist. Creating it..."
              sudo docker network create my_network
            else
              echo "Docker network 'my_network' already exists."
            fi

            # Restart Docker only if necessary
            if [ "$docker_needs_restart" = true ]; then
              sudo systemctl restart docker
            fi
          debug: true  # Enable debug mode

      - name: Deploy NotificationService container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.HOST }}
          username: ${{ env.USERNAME }}
          key: ${{ env.PLATFORM == 'aws' && secrets.AWS_EC2_KEY || secrets.AZURE_SSH_PRIVATE_KEY }}
          script: |
            echo "Deploying NotificationService container..."

            # Pull the Docker image
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/notification-service:latest

            # Stop and remove existing containers
            if sudo docker ps -a --format '{{.Names}}' | grep -Eq "^notification-service\$"; then
              echo "Stopping and removing existing notification-service container..."
              sudo docker stop notification-service
              sudo docker rm notification-service
            fi

            # Run the notification service container
            echo "Starting notification-service container..."
            sudo docker run -d \
              -p 3003:3003 \
              --name notification-service \
              --network my_network \
              -e KAFKA_CLIENT_ID=notification-service \
              -e KAFKA_BROKERS=kafka:9092 \
              -e KAFKA_GROUP_ID=notification-group \
              -e PORT=3003 \
              -e SMTP_HOST=${{ secrets.SMTP_HOST }} \
              -e SMTP_PORT=${{ secrets.SMTP_PORT }} \
              -e SMTP_USER=${{ secrets.SMTP_USER }} \
              -e SMTP_PASS=${{ secrets.SMTP_PASS }} \
              ${{ secrets.DOCKER_USERNAME }}/notification-service:latest
            
            # Check if the container is running
            if [ $(sudo docker inspect -f '{{.State.Running}}' notification-service) != "true" ]; then
              echo "notification-service container failed to start. Logs:"
              sudo docker logs notification-service
              exit 1
            fi

            echo "NotificationService deployment to ${{ env.PLATFORM }} complete!"
            echo "Service now available at http://${{ env.HOST }}:3003"
          debug: true  # Enable debug mode