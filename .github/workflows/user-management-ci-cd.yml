name: UserManagement API CI/CD Pipeline

on:
  push:
    branches:
      - main
    paths:
      - 'UserManagement.API/**'
      - 'UserManagement.API.Test/**'
  pull_request:
    branches:
      - main
    paths:
      - 'UserManagement.API/**'
      - 'UserManagement.API.Test/**'

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DB: EventFlex.UserManagement
          POSTGRES_USER: billy
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U billy -d EventFlex.UserManagement"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '9.0.x'
        timeout-minutes: 10  # Increase the timeout to 10 minutes

      - name: Install dotnet-ef tool
        run: dotnet tool install --global dotnet-ef

      - name: Restore dependencies
        run: dotnet restore ./UserManagement.API/UserManagement.API/UserManagement.API.csproj

      - name: Build
        run: dotnet build ./UserManagement.API/UserManagement.API/UserManagement.API.csproj --no-restore --configuration Release

      # - name: Run tests
      #   run: dotnet test ./UserManagement.API/UserManagement.API.Test/UserManagement.API.Test.csproj --no-build --verbosity normal

      - name: Debug docker containers
        run: |
          echo "Listing all containers:"
          docker ps -a
          echo "Inspecting the postgres service:"
          docker inspect postgres || echo "No container named postgres found."

      # - name: Verify PostgreSQL connection
      #   run: psql -h localhost -U billy -d EventFlex.UserManagement -c 'SELECT 1;'

      - name: Create uuid-ossp extension
        env:
          PGPASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          psql -h localhost -U billy -d EventFlex.UserManagement -c "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";"

      - name: Apply migrations
        env:
          ConnectionStrings__DefaultConnection: "Host=localhost;Database=EventFlex.UserManagement;Username=billy;Password=${{ secrets.DB_PASSWORD }}"
        run: |
          until dotnet ef database update --project ./UserManagement.API/UserManagement.API/UserManagement.API.csproj --startup-project ./UserManagement.API/UserManagement.API/UserManagement.API.csproj --connection "${ConnectionStrings__DefaultConnection}"; do
            echo "Retrying migration..."
            sleep 5
          done

      - name: Build Docker image
        run: docker build -t usermanagementapi:latest -f ./UserManagement.API/UserManagement.API/Dockerfile .

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image
        run: |
          docker tag usermanagementapi:latest ${{ secrets.DOCKER_USERNAME }}/usermanagementapi:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/usermanagementapi:latest

      - name: Deploy to AWS EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.AWS_EC2_HOST_USER_MANAGEMENT }}
          username: ${{ secrets.AWS_UBUNTU_USER }} # ubuntu for Unbuntu; ec2-user for Amazon Linux 2
          key: ${{ secrets.AWS_EC2_KEY }}
          script: |
            echo "SSH connection successful"
            # Update the package index
            sudo apt-get update -y
            # Check if Docker is installed
            if ! command -v docker &> /dev/null; then
              sudo apt-get install docker.io -y
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker ${{ secrets.AWS_UBUNTU_USER }}
            fi
            # Create a new Docker network
            if ! sudo docker network ls | grep -q my_network; then
              echo "Docker network 'my_network' does not exist. Creating it..."
              sudo docker network create my_network
            else
              echo "Docker network 'my_network' already exists."
            fi
            # Pull the Docker image
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/usermanagementapi:latest
            # Stop and remove existing containers
            if sudo docker ps -a --format '{{.Names}}' | grep -Eq "^usermanagementapi\$"; then
              sudo docker stop usermanagementapi
              sudo docker rm usermanagementapi
            fi
            if sudo docker ps -a --format '{{.Names}}' | grep -Eq "^postgres\$"; then
              sudo docker stop postgres
              sudo docker rm postgres
            fi
            # Wait for 2s
            sleep 2
            # Run PostgreSQL container
            sudo docker run -d --name postgres \
            --network my_network \
            -e POSTGRES_DB=EventFlex.UserManagement \
            -e POSTGRES_USER=billy \
            -e POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -v postgres-data:/var/lib/postgresql/data \
            -p 5432:5432 postgres:17
            # Wait for PostgreSQL to initialize
            until sudo docker exec postgres pg_isready -U billy -d EventFlex.UserManagement; do
              echo "Waiting for PostgreSQL to be ready..."
              sleep 2
            done
            # Run the application container
            sudo docker run -d -p 8080:8080 --name usermanagementapi \
            --network my_network \
            -e ConnectionStrings__DefaultConnection="Host=postgres;Database=EventFlex.UserManagement;Username=billy;Password=${{ secrets.DB_PASSWORD }}" \
            -e ASPNETCORE_URLS="http://+:8080" \
            -e MessagingService__Domain=${{ secrets.AWS_EC2_HOST_MESSAGING_SERVICE_PRIVATE_DNS }} \
            ${{ secrets.DOCKER_USERNAME }}/usermanagementapi:latest
            # Check if the container is running
            if [ $(sudo docker inspect -f '{{.State.Running}}' usermanagementapi) != "true" ]; then
              echo "usermanagementapi container failed to start. Logs:"
              sudo docker logs usermanagementapi
              exit 1
            fi
          debug: true  # Enable debug mode