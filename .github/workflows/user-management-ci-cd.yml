name: UserManagement API CI/CD Pipeline

on:
  push:
    branches:
      - main
    paths:
      - 'UserManagement.API/**'
      - 'UserManagement.API.Test/**'
  pull_request:
    branches:
      - main
    paths:
      - 'UserManagement.API/**'
      - 'UserManagement.API.Test/**'
  workflow_dispatch:
    inputs:
      cloud_platform:
        description: 'Cloud Platform for Deployment'
        required: true
        default: 'azure'
        type: choice
        options:
          - aws
          - azure

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'
        timeout-minutes: 10  # Increase the timeout to 10 minutes

      - name: Install dotnet-ef tool
        run: dotnet tool install --global dotnet-ef

      - name: Restore dependencies
        run: dotnet restore ./UserManagement.API/UserManagement.API/UserManagement.API.csproj

      - name: Build
        run: dotnet build ./UserManagement.API/UserManagement.API/UserManagement.API.csproj --no-restore --configuration Release

      # - name: Run tests
      #   run: dotnet test ./UserManagement.API/UserManagement.API.Test/UserManagement.API.Test.csproj --no-build --verbosity normal

      - name: Build Docker image
        run: docker build -t usermanagementapi:latest -f ./UserManagement.API/UserManagement.API/Dockerfile .

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image
        run: |
          docker tag usermanagementapi:latest ${{ secrets.DOCKER_USERNAME }}/usermanagementapi:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/usermanagementapi:latest
      
      # Determine which cloud platform to deploy to
      - name: Set deployment variables
        id: deployment-vars
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            PLATFORM="${{ github.event.inputs.cloud_platform }}"
          else
            PLATFORM="azure"  # Default to Azure for non-manual trigger
          fi
          echo "PLATFORM=$PLATFORM" >> $GITHUB_ENV

          # Set the appropriate host and username based on platform
          if [ "$PLATFORM" == "aws" ]; then
            echo "HOST=${{ secrets.AWS_EC2_HOST_USER_MANAGEMENT }}" >> $GITHUB_ENV
            echo "USERNAME=${{ secrets.AWS_UBUNTU_USER }}" >> $GITHUB_ENV
          else
            echo "HOST=${{ secrets.AZURE_VM_HOST }}" >> $GITHUB_ENV
            echo "USERNAME=${{ secrets.AZURE_VM_USERNAME }}" >> $GITHUB_ENV
          fi

      # Copy docker-compose.yml to target VM (optional if you want to use docker-compose)
      - name: Copy Docker Compose files to VM
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.HOST }}
          username: ${{ env.USERNAME }}
          key: ${{ env.PLATFORM == 'aws' && secrets.AWS_EC2_KEY || secrets.AZURE_SSH_PRIVATE_KEY }}
          source: "./UserManagement.API/docker-compose.yml"
          target: "/home/${{ env.USERNAME }}/UserManagement.API"

      - name: Deploy to VM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.HOST }}
          username: ${{ env.USERNAME }}
          key: ${{ env.PLATFORM == 'aws' && secrets.AWS_EC2_KEY || secrets.AZURE_SSH_PRIVATE_KEY }}
          script: |
            echo "SSH connection successful to ${{ env.HOST }}"
            echo "Deploying to ${{ env.PLATFORM }} VM"
            
            # Update the package index
            sudo apt-get update -y

            # Initialize the variable
            docker_needs_restart=false

            # Check if Docker is installed
            if ! command -v docker &> /dev/null; then
              sudo apt-get install docker.io -y
              sudo systemctl start docker
              sudo systemctl enable docker
              docker_needs_restart=true
            fi

            # Create docker group if it doesn't exist
            if ! getent group docker > /dev/null; then
              sudo groupadd docker
              docker_needs_restart=true
            fi

            # Add user to docker group
            sudo usermod -aG docker ${{ env.USERNAME }}

            # Create a new Docker network
            if ! sudo docker network ls | grep -q my_network; then
              echo "Docker network 'my_network' does not exist. Creating it..."
              sudo docker network create my_network
            else
              echo "Docker network 'my_network' already exists."
            fi

            # Create Docker volume for PostgreSQL
            if ! sudo docker volume ls | grep -q postgres-data; then
              sudo docker volume create postgres-data
            fi

            # Restart Docker only if necessary
            if [ "$docker_needs_restart" = true ]; then
              sudo systemctl restart docker
            fi

            # Pull the Docker image
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/usermanagementapi:latest
            
            # Stop and remove existing containers
            if sudo docker ps -a --format '{{.Names}}' | grep -Eq "^usermanagementapi\$"; then
              sudo docker stop usermanagementapi
              sudo docker rm usermanagementapi
            fi
            if sudo docker ps -a --format '{{.Names}}' | grep -Eq "^postgres\$"; then
              sudo docker stop postgres
              sudo docker rm postgres
            fi

            # Wait for 2s
            sleep 2

            # Run PostgreSQL container
            sudo docker run -d --name postgres \
            --network my_network \
            -e POSTGRES_DB=EventFlex.UserManagement \
            -e POSTGRES_USER=billy \
            -e POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -v postgres-data:/var/lib/postgresql/data \
            -p 5432:5432 postgres:17

            # Wait for PostgreSQL to initialize
            echo "Waiting for PostgreSQL to initialize..."
            for i in {1..30}; do
              if sudo docker exec postgres pg_isready -U billy -d EventFlex.UserManagement; then
                echo "PostgreSQL is ready!"
                break
              fi
              echo "Waiting for PostgreSQL to be ready... attempt $i/30"
              sleep 2
            done

            # Check if PostgreSQL is ready
            if ! sudo docker exec postgres pg_isready -U billy -d EventFlex.UserManagement; then
              echo "PostgreSQL failed to initialize within the expected time."
              exit 1
            fi

            # Run the application container
            echo "Starting UserManagement API container..."
            sudo docker run -d -p 8080:8080 --name usermanagementapi \
            --network my_network \
            -e ConnectionStrings__DefaultConnection="Host=postgres;Database=EventFlex.UserManagement;Username=billy;Password=${{ secrets.DB_PASSWORD }}" \
            -e JWT__ValidIssuer="http://${{ env.HOST }}:3000" \
            -e JWT__ValidAudience="http://${{ env.HOST }}:3000" \
            -e JWT__secret="5baafb33-00eb-4c02-b314-4f650820dbc6" \
            -e ASPNETCORE_URLS="http://+:8080" \
            -e MessagingService__Domain=${{ secrets.DOCKER_MESSAGING_SERVICE_NAME }} \
            ${{ secrets.DOCKER_USERNAME }}/usermanagementapi:latest
            
            # Check if the container is running
            if [ $(sudo docker inspect -f '{{.State.Running}}' usermanagementapi) != "true" ]; then
              echo "usermanagementapi container failed to start. Logs:"
              sudo docker logs usermanagementapi
              exit 1
            fi
            
            echo "UserManagement API deployment to ${{ env.PLATFORM }} complete!"
            echo "API now available at http://${{ env.HOST }}:8080/api"
          debug: true  # Enable debug mode